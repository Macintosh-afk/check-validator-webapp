let tg = window.Telegram.WebApp;
tg.expand();

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±–∞–Ω–∫–æ–≤
const banks = [
    { id: 'sber', name: '–°–±–µ—Ä–±–∞–Ω–∫', icon: 'üè¶' },
    { id: 'tinkoff', name: '–¢-–±–∞–Ω–∫', icon: 'üè¶' },
    { id: 'alfa', name: '–ê–ª—å—Ñ–∞ –±–∞–Ω–∫', icon: 'üè¶' },
    { id: 'raif', name: '–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω', icon: 'üè¶' },
    { id: 'vtb', name: '–í–¢–ë', icon: 'üè¶' },
    { id: 'otp', name: '–û–¢–ü', icon: 'üè¶' },
    { id: 'ozon', name: '–û–∑–æ–Ω', icon: 'üè¶' },
    { id: 'psb', name: '–ü–°–ë', icon: 'üè¶' },
    { id: 'yandex', name: '–Ø–Ω–¥–µ–∫—Å', icon: 'üè¶' },
    { id: 'uralsib', name: '–£—Ä–∞–ª—Å–∏–±', icon: 'üè¶' },
    { id: 'mts-money', name: '–ú–¢–° –¥–µ–Ω—å–≥–∏', icon: 'üè¶' },
    { id: 'mts-wallet', name: '–ö–æ—à–µ–ª–µ–∫ (–ú–¢–°)', icon: 'üè¶' },
    { id: 'mts-bank', name: '–ú–¢–° –ë–∞–Ω–∫', icon: 'üè¶' },
    { id: 'gazprom', name: '–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫', icon: 'üè¶' },
    { id: 'sovkom', name: '–°–æ–≤–∫–æ–º–±–∞–Ω–∫', icon: 'üè¶' },
    { id: 'russia', name: '–ê–ë –†–æ—Å—Å–∏—è', icon: 'üè¶' },
    { id: 'pochta', name: '–ü–æ—á—Ç–∞ –ë–∞–Ω–∫', icon: 'üè¶' },
    { id: 'domrf', name: '–î–æ–º.–†–§', icon: 'üè¶' },
    { id: 'rosselhoz', name: '–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫', icon: 'üè¶' },
    { id: 'mkb', name: '–ú–ö–ë', icon: 'üè¶' },
    { id: 'ubrir', name: '–£–ë–†–∏–†', icon: 'üè¶' }
];

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –±–∞–Ω–∫–æ–≤
function generateBankCards() {
    const banksGrid = document.querySelector('.banks-grid');
    if (banksGrid) {
        banksGrid.innerHTML = banks.map(bank => `
            <div class="bank-card ${bank.id === 'sber' ? 'active' : ''}" data-bank="${bank.id}">
                <span class="bank-icon">${bank.icon}</span>
                <span class="bank-name">${bank.name}</span>
            </div>
        `).join('');
    }
}

// –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
class PDFParser {
    async getPDFVersion(file) {
        try {
            // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ PDF
            const buffer = await this.readFileAsArrayBuffer(file);
            const header = new Uint8Array(buffer.slice(0, 8));
            const version = new TextDecoder().decode(header);
            
            // PDF –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ã—á–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ "%PDF-1.7"
            const match = version.match(/PDF-(\d+\.\d+)/);
            if (match) {
                return parseFloat(match[1]);
            }
            
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ PDF:', error);
            return null;
        }
    }

    async readFileAsArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(reader.error);
            reader.readAsArrayBuffer(file);
        });
    }

    async validatePDFStructure(file) {
        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PDF
        return true;
    }

    async extractFullData(file) {
        return {
            text: await this.extractText(file),
            metadata: await this.extractMetadata(file),
            images: await this.extractImages(file)
        };
    }

    async extractText(file) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        return new Promise((resolve) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.readAsText(file);
        });
    }

    async extractMetadata(file) {
        return {
            creationDate: new Date(),
            modificationDate: new Date(),
            author: "Unknown"
        };
    }

    async extractImages(file) {
        return [];
    }

    async checkPDFLinearization(file) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏–∏ PDF
        return true;
    }

    async checkObjectStreams(file) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        return true;
    }

    async checkCrossReferenceStream(file) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        return true;
    }
}

class QRCodeValidator {
    async decode(qrCode) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞
        return "Decoded QR content";
    }
}

class DigitalSignatureVerifier {
    async verify(file, bankId) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏
        return true;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
async function handleFileUpload(file) {
    if (!file) {
        showError('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
        return;
    }

    if (file.type !== 'application/pdf') {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª');
        return;
    }

    showLoading();
    
    try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        const validator = new SupermaxSberbankValidator();
        const result = await validator.performUltimateValidation(file);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ–Ω—è—Ç–Ω–æ–º –≤–∏–¥–µ
        const resultDiv = document.getElementById('validationResult');
        resultDiv.classList.remove('hidden');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ —á–µ–∫ –ø—Ä–æ–≤–µ—Ä–∫—É
        const isValid = result.score.total >= 0.8; // –ü–æ—Ä–æ–≥ –≤ 80%

        resultDiv.innerHTML = `
            <div class="validation-result ${isValid ? 'valid' : 'invalid'}">
                <div class="result-header ${isValid ? 'success' : 'warning'}">
                    <div class="result-status">
                        <div class="status-icon" style="font-size: 48px; margin-right: 20px">
                            ${isValid ? '‚úÖ' : '‚ùå'}
                        </div>
                        <div class="status-text">
                            <h2 style="margin: 0; font-size: 24px">
                                ${isValid ? '–ß–ï–ö –ü–û–î–õ–ò–ù–ù–´–ô' : '–ß–ï–ö –ù–ï –ü–†–û–®–ï–õ –ü–†–û–í–ï–†–ö–£'}
                            </h2>
                            <p style="margin: 5px 0 0 0; font-size: 18px">
                                –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å: ${(result.score.total * 100).toFixed(1)}%
                            </p>
                        </div>
                    </div>
                </div>

                <div class="check-details" style="margin-top: 20px">
                    <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</h3>
                    <div class="check-list" style="margin-top: 10px">
                        ${Object.entries(result.checks)
                            .map(([key, value]) => `
                                <div class="check-item ${value ? 'success' : 'failure'}" 
                                     style="padding: 10px; margin: 5px 0; border-radius: 8px">
                                    ${value ? '‚úì' : '‚úó'} ${getCheckName(key)}
                                </div>
                            `).join('')}
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        addToHistory(file.name, isValid);
        
    } catch (error) {
        showError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞: ${error.message}`);
    } finally {
        hideLoading();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–æ–∫
function getCheckName(check) {
    const names = {
        structure: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ PDF —Ñ–∞–π–ª–∞',
        signature: '–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å',
        qrCode: 'QR-–∫–æ–¥ —á–µ–∫–∞',
        content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ–∫–∞',
        metadata: '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
    };
    return names[check] || check;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
function addToHistory(fileName, isValid) {
    const historyList = document.getElementById('historyList');
    if (!historyList) return;

    const date = new Date().toLocaleString();
    const historyItem = document.createElement('div');
    historyItem.className = 'history-item';
    historyItem.innerHTML = `
        <div style="flex: 1">
            <div style="font-weight: 500">${fileName}</div>
            <div style="color: var(--text-secondary); font-size: 12px">${date}</div>
        </div>
        <span style="color: ${isValid ? 'var(--success)' : 'var(--error)'}">
            ${isValid ? '‚úì' : '‚úó'}
        </span>
    `;
    
    historyList.insertBefore(historyItem, historyList.firstChild);
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading() {
    document.getElementById('loading').style.display = 'flex';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
}

function showError(message) {
    const resultDiv = document.getElementById('validationResult');
    if (resultDiv) {
        resultDiv.innerHTML = `
            <div class="error">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-message">${message}</div>
            </div>
        `;
        resultDiv.classList.remove('hidden');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    const dropZone = document.getElementById('dropZone');
    const pdfInput = document.getElementById('pdfInput');

    if (dropZone) {
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('drag-over');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('drag-over');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('drag-over');
            
            if (e.dataTransfer.files.length > 0) {
                handleFileUpload(e.dataTransfer.files[0]);
            }
        });
    }

    if (pdfInput) {
        pdfInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                handleFileUpload(e.target.files[0]);
            }
        });
    }

    generateBankCards();
});

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
class AdvancedReceiptValidator {
    constructor() {
        this.pdfParser = new PDFParser();
        this.qrValidator = new QRCodeValidator();
        this.digitalSignatureVerifier = new DigitalSignatureVerifier();
    }

    async validateReceipt(file, bankId) {
        const validator = this.getValidatorForBank(bankId);
        
        try {
            const validationResult = {
                isValid: false,
                details: {},
                securityChecks: {},
                metadata: {},
                warnings: []
            };

            // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PDF –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            const isPdfValid = await this.pdfParser.validatePDFStructure(file);
            if (!isPdfValid) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ PDF —Ñ–∞–π–ª–∞');
            }

            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const pdfData = await this.pdfParser.extractFullData(file);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –±–∞–Ω–∫–∞
            const signatureValid = await this.digitalSignatureVerifier.verify(file, bankId);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ QR-–∫–æ–¥–∞ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            const qrData = await this.qrValidator.decode(pdfData.qrCode);
            
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è –±–∞–Ω–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            const bankValidation = await validator.validateBankSpecific(pdfData, qrData);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            const tamperingCheck = await this.checkForTampering(file);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            const timestampValid = await this.validateTimestamps(pdfData);

            validationResult.isValid = signatureValid && bankValidation.isValid && !tamperingCheck.modified;
            validationResult.details = {
                bankSpecific: bankValidation.details,
                qrData: qrData,
                timestamp: pdfData.timestamp,
                merchantInfo: pdfData.merchantInfo,
                transactionDetails: pdfData.transactionDetails
            };
            validationResult.securityChecks = {
                digitalSignature: signatureValid,
                tamperingDetected: !tamperingCheck.modified,
                qrCodeValid: qrData.isValid,
                timestampValid: timestampValid
            };

            return validationResult;

        } catch (error) {
            throw new ValidationError(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    getValidatorForBank(bankId) {
        const validators = {
            'sber': new SberbankValidator(),
            'tinkoff': new TinkoffValidator(),
            'alfa': new AlfaBankValidator(),
            'raif': new RaiffeisenValidator(),
            'vtb': new VTBValidator(),
            'otp': new OTPValidator(),
            'ozon': new OzonBankValidator(),
            'psb': new PSBValidator(),
            'yandex': new YandexBankValidator(),
            'uralsib': new UralSibValidator(),
            'mts-bank': new MTSBankValidator(),
            'gazprom': new GazpromBankValidator(),
            'sovkom': new SovkomBankValidator(),
            'russia': new BankRussiaValidator(),
            'pochta': new PostBankValidator(),
            'domrf': new DomRFValidator(),
            'rosselhoz': new RosselhozBankValidator(),
            'mkb': new MKBValidator(),
            'ubrir': new UBRiRValidator()
        };

        const validator = validators[bankId];
        if (!validator) {
            throw new Error(`–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –±–∞–Ω–∫–∞ ${bankId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
        return validator;
    }

    async checkForTampering(file) {
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ PDF
        const checks = {
            modified: false,
            details: []
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö PDF
        const metadata = await this.pdfParser.getMetadata(file);
        if (metadata.modificationDate !== metadata.creationDate) {
            checks.modified = true;
            checks.details.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–µ–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editingTraces = await this.pdfParser.checkEditingTraces(file);
        if (editingTraces.found) {
            checks.modified = true;
            checks.details.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        }

        return checks;
    }
}

// –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –°–±–µ—Ä–±–∞–Ω–∫–∞
class SberbankAdvancedValidator {
    constructor() {
        this.pdfParser = new PDFParser();
        this.qrValidator = new QRCodeValidator();
        this.imageAnalyzer = new ImageAnalyzer();
        this.fontValidator = new FontValidator();
        this.securityFeatureDetector = new SecurityFeatureDetector();
    }

    async validateSberbankReceipt(file) {
        const validationResult = {
            isValid: false,
            securityChecks: {},
            contentChecks: {},
            visualChecks: {},
            technicalChecks: {},
            warnings: [],
            details: {}
        };

        try {
            // 1. –ü–ï–†–í–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê
            const fileChecks = await this.validateFileProperties(file);
            if (!fileChecks.valid) {
                throw new Error('–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞');
            }

            // 2. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•
            const pdfData = await this.pdfParser.extractFullData(file);
            const pdfImages = await this.pdfParser.extractImages(file);
            const pdfMetadata = await this.pdfParser.getMetadata(file);
            
            // 3. –ì–õ–£–ë–û–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
            validationResult.securityChecks = await this.performSecurityChecks({
                file,
                pdfData,
                pdfImages,
                pdfMetadata
            });

            // 4. –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û
            validationResult.contentChecks = await this.validateContent(pdfData);

            // 5. –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
            validationResult.visualChecks = await this.performVisualChecks(pdfImages);

            // 6. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
            validationResult.technicalChecks = await this.performTechnicalChecks(file);

            // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            validationResult.isValid = this.isOverallValid(validationResult);

            return validationResult;

        } catch (error) {
            throw new SberbankValidationError(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
        }
    }

    async performSecurityChecks({ file, pdfData, pdfImages, pdfMetadata }) {
        const securityChecks = {
            digitalSignature: false,
            qrCodeValid: false,
            watermarkValid: false,
            cryptographicElements: false,
            tampering: false,
            metadata: false
        };

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞
        const signatureCheck = await this.validateDigitalSignature(file);
        securityChecks.digitalSignature = {
            valid: signatureCheck.valid,
            certificateDetails: signatureCheck.certificateInfo,
            timestamp: signatureCheck.timestamp
        };

        // 2. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ QR-–∫–æ–¥–∞
        const qrCheck = await this.validateQRCode(pdfData);
        securityChecks.qrCodeValid = {
            valid: qrCheck.valid,
            format: qrCheck.format,
            matchesContent: qrCheck.matchesContent,
            fpsData: qrCheck.fpsData
        };

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        const watermarkCheck = await this.validateWatermark(pdfImages);
        securityChecks.watermarkValid = {
            valid: watermarkCheck.valid,
            pattern: watermarkCheck.pattern,
            position: watermarkCheck.position
        };

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const cryptoCheck = await this.validateCryptographicElements(pdfData);
        securityChecks.cryptographicElements = {
            valid: cryptoCheck.valid,
            elements: cryptoCheck.elements
        };

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const tamperingCheck = await this.checkForTampering(file);
        securityChecks.tampering = {
            noModifications: tamperingCheck.clean,
            lastModified: tamperingCheck.lastModified,
            modificationDetails: tamperingCheck.details
        };

        return securityChecks;
    }

    async validateContent(pdfData) {
        const contentValidation = {
            isValid: false,
            details: {},
            score: 0
        };

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–µ–∫–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞
        const patterns = {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            bankInfo: {
                patterns: [
                    /–ü–ê–û\s+–°–ë–ï–†–ë–ê–ù–ö/i,
                    /–°–ë–ï–†–ë–ê–ù–ö/i,
                    /SBERBANK/i
                ],
                weight: 0.2
            },
            operationStatus: {
                patterns: [
                    /–û–ü–ï–†–ê–¶–ò–Ø\s+–û–î–û–ë–†–ï–ù–ê/i,
                    /–û–î–û–ë–†–ï–ù–û/i,
                    /APPROVED/i
                ],
                weight: 0.2
            },
            // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
            transactionIds: {
                patterns: [
                    /RRN:\s*\d{12}/,
                    /AUTH\.CODE:\s*\d{6}/,
                    /TERMINAL:\s*\d{8}/
                ],
                weight: 0.15
            },
            // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            amount: {
                patterns: [
                    /–°–£–ú–ú–ê:?\s*[\d\s,.]+\s*(?:–†–£–ë|RUB)/i,
                    /–ò–¢–û–ì–û:?\s*[\d\s,.]+/i,
                    /TOTAL:?\s*[\d\s,.]+/i
                ],
                weight: 0.25
            },
            // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            datetime: {
                patterns: [
                    /\d{2}\.\d{2}\.\d{2,4}\s+\d{2}:\d{2}(?::\d{2})?/,
                    /\d{2}\/\d{2}\/\d{2,4}\s+\d{2}:\d{2}/
                ],
                weight: 0.1
            },
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cardInfo: {
                patterns: [
                    /–ö–ê–†–¢–ê\s*\*{4}\d{4}/i,
                    /CARD\s*\*{4}\d{4}/i
                ],
                weight: 0.1
            }
        };

        let totalScore = 0;
        let totalWeight = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for (const [key, group] of Object.entries(patterns)) {
            const groupValid = group.patterns.some(pattern => pattern.test(pdfData.text));
            contentValidation.details[key] = groupValid;
            
            if (groupValid) {
                totalScore += group.weight;
            }
            totalWeight += group.weight;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
        contentValidation.score = totalScore / totalWeight;
        contentValidation.isValid = contentValidation.score >= 0.8; // –ü–æ—Ä–æ–≥ –≤ 80%

        return contentValidation;
    }

    async performVisualChecks(pdfImages) {
        return {
            logo: await this.validateSberbankLogo(pdfImages),
            layout: await this.validateReceiptLayout(pdfImages),
            fonts: await this.validateFonts(pdfImages),
            colorScheme: await this.validateColorScheme(pdfImages),
            securityElements: await this.validateSecurityElements(pdfImages)
        };
    }

    async performTechnicalChecks(file) {
        return {
            pdfVersion: await this.validatePDFVersion(file),
            encoding: await this.validateEncoding(file),
            compression: await this.validateCompression(file),
            metadata: await this.validateTechnicalMetadata(file),
            structure: await this.validateDocumentStructure(file)
        };
    }

    async validateQRCode(pdfData) {
        const qrContent = await this.qrValidator.decode(pdfData.qrCode);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã QR-–∫–æ–¥–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞
        const sberQRPattern = {
            prefix: /^ST00012/,
            name: /Name=\d{15}/,
            bankName: /–ü–ê–û\s+–°–ë–ï–†–ë–ê–ù–ö/,
            sum: /Sum=\d+\.\d{2}/,
            date: /Date=\d{8}T\d{6}/
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ FPS (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π) –¥–∞–Ω–Ω—ã—Ö
        const fpsData = await this.validateFPSData(qrContent);

        return {
            valid: Object.values(sberQRPattern)
                .every(pattern => pattern.test(qrContent)),
            format: 'ST00012',
            matchesContent: this.qrContentMatchesReceipt(qrContent, pdfData),
            fpsData: fpsData
        };
    }

    async validateAmount(text) {
        const amountPatterns = {
            main: /–°–£–ú–ú–ê:\s*(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)\s*(?:–†–£–ë|RUB)/i,
            additional: /(?:–ò–¢–û–ì–û|–í–°–ï–ì–û):\s*(\d{1,3}(?:\s\d{3})*(?:\.\d{2})?)/i
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Å—É–º–º –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö —á–µ–∫–∞
        const amounts = this.extractAllAmounts(text);
        const consistencyCheck = this.checkAmountsConsistency(amounts);

        return {
            valid: consistencyCheck.valid,
            amount: amounts.main,
            currency: 'RUB',
            format: '–°–ë–ï–†–ë–ê–ù–ö',
            consistency: consistencyCheck
        };
    }

    isOverallValid(validationResult) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const criticalChecks = [
            validationResult.securityChecks.digitalSignature.valid,
            validationResult.securityChecks.qrCodeValid.valid,
            validationResult.securityChecks.tampering.noModifications,
            validationResult.contentChecks.requiredFields.every(f => f.valid),
            validationResult.contentChecks.amountFormat.valid,
            validationResult.contentChecks.dateTime.valid
        ];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const nonCriticalChecks = [
            validationResult.visualChecks.logo,
            validationResult.visualChecks.layout,
            validationResult.technicalChecks.pdfVersion,
            validationResult.technicalChecks.structure
        ];

        return {
            valid: criticalChecks.every(Boolean),
            criticalChecksPassed: criticalChecks.filter(Boolean).length,
            totalCriticalChecks: criticalChecks.length,
            nonCriticalChecksPassed: nonCriticalChecks.filter(Boolean).length,
            totalNonCriticalChecks: nonCriticalChecks.length,
            overallScore: this.calculateValidationScore(validationResult)
        };
    }

    async validatePaymentMethod(pdfData) {
        const paymentMethodResult = {
            method: null,
            details: {},
            isValid: false
        };

        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
        const patterns = {
            sbp: {
                patterns: [
                    /–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π/i,
                    /–°–ë–ü/i,
                    /–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –°–ë–ü/i,
                    /–ü–ï–†–ï–í–û–î –°–ë–ü/i
                ],
                type: '–°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)'
            },
            card: {
                patterns: [
                    /–ö–∞—Ä—Ç–∞ \*{4}\d{4}/i,
                    /–û–ü–õ–ê–¢–ê –ü–û –ö–ê–†–¢–ï/i,
                    /Payment by card/i,
                    /CARD/i
                ],
                type: '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π'
            },
            phoneNumber: {
                patterns: [
                    /–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω/i,
                    /–ü–ï–†–ï–í–û–î –ù–ê –¢–ï–õ\./i,
                    /–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞/i,
                    /PHONE TRANSFER/i
                ],
                type: '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            },
            accountTransfer: {
                patterns: [
                    /–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—á–µ—Ç/i,
                    /–ü–ï–†–ï–í–û–î –ù–ê –°–ß–ï–¢/i,
                    /Account transfer/i
                ],
                type: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—á—ë—Ç'
            },
            qrCode: {
                patterns: [
                    /–û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É/i,
                    /QR-–∫–æ–¥/i,
                    /–û–ü–õ–ê–¢–ê –ü–û QR/i
                ],
                type: '–û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É'
            }
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —á–µ–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for (const [methodKey, methodData] of Object.entries(patterns)) {
            for (const pattern of methodData.patterns) {
                if (pattern.test(pdfData.text)) {
                    paymentMethodResult.method = methodData.type;
                    paymentMethodResult.isValid = true;

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
                    switch (methodKey) {
                        case 'sbp':
                            paymentMethodResult.details = await this.extractSBPDetails(pdfData.text);
                            break;
                        case 'card':
                            paymentMethodResult.details = this.extractCardDetails(pdfData.text);
                            break;
                        case 'phoneNumber':
                            paymentMethodResult.details = this.extractPhoneDetails(pdfData.text);
                            break;
                        case 'accountTransfer':
                            paymentMethodResult.details = this.extractAccountDetails(pdfData.text);
                            break;
                        case 'qrCode':
                            paymentMethodResult.details = await this.extractQRDetails(pdfData);
                            break;
                    }
                    break;
                }
            }
            if (paymentMethodResult.isValid) break;
        }

        return paymentMethodResult;
    }

    async extractSBPDetails(text) {
        const details = {
            bankName: null,
            recipientName: null,
            recipientBank: null,
            transactionId: null
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const bankMatch = text.match(/–ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\s*([^\n]+)/i);
        if (bankMatch) details.bankName = bankMatch[1].trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const nameMatch = text.match(/–ü–æ–ª—É—á–∞—Ç–µ–ª—å:\s*([^\n]+)/i);
        if (nameMatch) details.recipientName = nameMatch[1].trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –°–ë–ü
        const transactionMatch = text.match(/ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –°–ë–ü:\s*(\d+)/i);
        if (transactionMatch) details.transactionId = transactionMatch[1];

        return details;
    }

    extractCardDetails(text) {
        const details = {
            cardNumber: null,
            cardType: null,
            authCode: null,
            terminal: null
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        const cardMatch = text.match(/(?:–ö–ê–†–¢–ê|CARD)\s*\*{4}(\d{4})/i);
        if (cardMatch) details.cardNumber = `****${cardMatch[1]}`;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ä—Ç—ã
        if (text.includes('MIR')) details.cardType = '–ú–ò–†';
        else if (text.includes('VISA')) details.cardType = 'VISA';
        else if (text.includes('MASTERCARD')) details.cardType = 'Mastercard';

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authMatch = text.match(/AUTH\.CODE:\s*(\d+)/i);
        if (authMatch) details.authCode = authMatch[1];

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        const terminalMatch = text.match(/TERMINAL:\s*(\d+)/i);
        if (terminalMatch) details.terminal = terminalMatch[1];

        return details;
    }

    extractPhoneDetails(text) {
        const details = {
            phoneNumber: null,
            recipientName: null,
            bankName: null
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phoneMatch = text.match(/(?:–¢–ï–õ|PHONE)[\s:]*\+?7\s*\*{3}\s*\*{3}\s*(\d{2}\s*\d{2})/i);
        if (phoneMatch) details.phoneNumber = `+7 *** *** ${phoneMatch[1]}`;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const nameMatch = text.match(/–ü–æ–ª—É—á–∞—Ç–µ–ª—å:?\s*([^\n]+)/i);
        if (nameMatch) details.recipientName = nameMatch[1].trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
        const bankMatch = text.match(/(?:–ë–∞–Ω–∫|Bank):\s*([^\n]+)/i);
        if (bankMatch) details.bankName = bankMatch[1].trim();

        return details;
    }

    extractAccountDetails(text) {
        const details = {
            accountNumber: null,
            recipientName: null,
            bankName: null,
            purpose: null
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞
        const accountMatch = text.match(/(?:–°—á–µ—Ç|Account)[\s:]*\*{16}(\d{4})/i);
        if (accountMatch) details.accountNumber = `************${accountMatch[1]}`;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        const nameMatch = text.match(/–ü–æ–ª—É—á–∞—Ç–µ–ª—å:?\s*([^\n]+)/i);
        if (nameMatch) details.recipientName = nameMatch[1].trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
        const bankMatch = text.match(/(?:–ë–∞–Ω–∫|Bank):\s*([^\n]+)/i);
        if (bankMatch) details.bankName = bankMatch[1].trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        const purposeMatch = text.match(/–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:?\s*([^\n]+)/i);
        if (purposeMatch) details.purpose = purposeMatch[1].trim();

        return details;
    }

    async extractQRDetails(pdfData) {
        const details = {
            qrType: null,
            merchantId: null,
            merchantName: null,
            terminal: null
        };

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø QR-–∫–æ–¥–∞
        if (pdfData.text.includes('–°–ë–ü')) {
            details.qrType = '–°–ë–ü QR';
        } else if (pdfData.text.includes('–ü–ª–∞—Ç–∏ QR')) {
            details.qrType = '–ü–ª–∞—Ç–∏ QR';
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–µ—Ä—á–∞–Ω—Ç–∞
        const merchantMatch = text.match(/(?:MERCHANT|–ú–µ—Ä—á–∞–Ω—Ç)\s*ID:\s*(\d+)/i);
        if (merchantMatch) details.merchantId = merchantMatch[1];

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä—á–∞–Ω—Ç–∞
        const nameMatch = text.match(/(?:MERCHANT|–ú–µ—Ä—á–∞–Ω—Ç)\s*NAME:\s*([^\n]+)/i);
        if (nameMatch) details.merchantName = nameMatch[1].trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        const terminalMatch = text.match(/TERMINAL:\s*(\d+)/i);
        if (terminalMatch) details.terminal = terminalMatch[1];

        return details;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ showResult –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    showResult(result) {
        this.progressSection.classList.add('hidden');
        this.resultSection.classList.remove('hidden');

        const isValid = result.score.total >= 0.8;

        let contentDetails = '';
        if (result.details.contentValidation) {
            contentDetails = `
                <div class="content-validation-details">
                    <h3>–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:</h3>
                    <div class="content-checks">
                        ${Object.entries(result.details.contentValidation.details)
                            .map(([key, value]) => `
                                <div class="content-check-item ${value ? 'success' : 'failure'}">
                                    <span class="check-icon">${value ? '‚úì' : '‚úó'}</span>
                                    <span class="check-name">${this.getContentCheckName(key)}</span>
                                </div>
                            `).join('')}
                    </div>
                    <div class="content-score">
                        –û—Ü–µ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: ${(result.details.contentValidation.score * 100).toFixed(1)}%
                    </div>
                </div>
            `;
        }

        let pdfVersionInfo = '';
        if (result.pdfVersion) {
            pdfVersionInfo = `
                <div class="pdf-version-info">
                    <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PDF:</h3>
                    <p>–í–µ—Ä—Å–∏—è PDF: ${result.pdfVersion}</p>
                    ${result.details.pdfV5Specific ? `
                        <div class="pdf-v5-checks">
                            <p>–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è PDF v5:</p>
                            <ul>
                                <li>–õ–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏—è: ${result.details.pdfV5Specific.linearized ? '‚úì' : '‚úó'}</li>
                                <li>–ü–æ—Ç–æ–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤: ${result.details.pdfV5Specific.objectStreams ? '‚úì' : '‚úó'}</li>
                                <li>–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏: ${result.details.pdfV5Specific.crossReferenceStream ? '‚úì' : '‚úó'}</li>
                            </ul>
                        </div>
                    ` : ''}
                </div>
            `;
        }

        let warningsSection = '';
        if (result.warnings && result.warnings.length > 0) {
            warningsSection = `
                <div class="warnings-section">
                    <h3>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h3>
                    <ul>
                        ${result.warnings.map(warning => `<li>${warning}</li>`).join('')}
                    </ul>
                </div>
            `;
        }

        this.resultSection.innerHTML = `
            <div class="validation-result ${isValid ? 'valid' : 'invalid'}">
                <div class="result-header ${isValid ? 'success' : 'warning'}">
                    <div class="result-status">
                        <div class="status-icon">${isValid ? '‚úÖ' : '‚ùå'}</div>
                        <div class="status-text">
                            <h2>
                                ${isValid ? '–ß–ï–ö –ü–û–î–õ–ò–ù–ù–´–ô' : '–ß–ï–ö –ù–ï –ü–†–û–®–ï–õ –ü–†–û–í–ï–†–ö–£'}
                            </h2>
                            <p>–û–±—â–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: ${(result.score.total * 100).toFixed(1)}%</p>
                        </div>
                    </div>
                </div>

                <div class="check-details">
                    <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</h3>
                    <div class="check-list">
                        ${Object.entries(result.checks)
                            .map(([key, value]) => `
                                <div class="check-item ${value ? 'success' : 'failure'}">
                                    ${value ? '‚úì' : '‚úó'} ${this.getCheckName(key)}
                                    ${key === 'content' ? `(${(result.score.details.content * 100).toFixed(1)}%)` : ''}
                                </div>
                            `).join('')}
                    </div>
                </div>

                ${contentDetails}
                ${pdfVersionInfo}
                ${warningsSection}
            </div>
        `;
    }

    getContentCheckName(key) {
        const names = {
            bankInfo: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ',
            operationStatus: '–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏',
            transactionIds: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
            amount: '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏',
            datetime: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
            cardInfo: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ'
        };
        return names[key] || key;
    }

    getCheckName(key) {
        const names = {
            structure: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ PDF —Ñ–∞–π–ª–∞',
            signature: '–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å',
            qrCode: 'QR-–∫–æ–¥ —á–µ–∫–∞',
            content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ–∫–∞',
            metadata: '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
        };
        return names[key] || key;
    }
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–æ–≤...

class UltimateSberbankValidator {
    constructor() {
        this.pdfParser = new AdvancedPDFParser();
        this.qrValidator = new EnhancedQRValidator();
        this.imageAnalyzer = new DeepImageAnalyzer();
        this.aiDetector = new AIFraudDetector();
        this.blockchainVerifier = new BlockchainVerifier();
        this.mlAnalyzer = new MachineLearningAnalyzer();
    }

    async validateWithMaximumSecurity(file) {
        const result = {
            isValid: false,
            aiAnalysis: {},
            blockchainVerification: {},
            deepSecurity: {},
            forensicAnalysis: {},
            mlPredictions: {},
            anomalyDetection: {},
            complianceCheck: {},
            details: {}
        };

        try {
            // 1. –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
            const cryptoChecks = await this.performAdvancedCryptoChecks(file);
            
            // 2. AI-POWERED –ê–ù–ê–õ–ò–ó
            const aiChecks = await this.performAIAnalysis(file);
            
            // 3. –ë–õ–û–ö–ß–ï–ô–ù –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø
            const blockchainChecks = await this.verifyOnBlockchain(file);
            
            // 4. –§–û–†–ï–ù–ó–ò–ö –ê–ù–ê–õ–ò–ó
            const forensicChecks = await this.performForensicAnalysis(file);
            
            // 5. –ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï
            const mlChecks = await this.performMLAnalysis(file);

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            result.deepSecurity = await this.combineAllChecks({
                cryptoChecks,
                aiChecks,
                blockchainChecks,
                forensicChecks,
                mlChecks
            });

            return result;
        } catch (error) {
            throw new UltimateSberbankValidationError(error);
        }
    }

    async performAdvancedCryptoChecks(file) {
        return {
            quantumResistantSignature: await this.verifyQuantumResistantSignature(file),
            homomorphicEncryption: await this.checkHomomorphicEncryption(file),
            zeroKnowledgeProof: await this.verifyZeroKnowledgeProof(file),
            postQuantumCryptography: await this.checkPostQuantumSecurity(file),
            multiLayerEncryption: await this.verifyMultiLayerEncryption(file)
        };
    }

    async performAIAnalysis(file) {
        const aiAnalyzer = new DeepLearningAnalyzer({
            models: ['transformers', 'gpt-4', 'stable-diffusion']
        });

        return {
            // –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–∏–∫—Å–µ–ª–µ–π
            imageAuthenticity: await aiAnalyzer.analyzeImageAuthenticity(file),
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            syntheticContentDetection: await aiAnalyzer.detectSyntheticContent(file),
            
            // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–µ—á–∞—Ç–∏
            printPatternAnalysis: await aiAnalyzer.analyzePrintPatterns(file),
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            structuralAnomalyDetection: await aiAnalyzer.detectStructuralAnomalies(file),
            
            // –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –ò–ò
            metadataIntelligence: await aiAnalyzer.analyzeMetadata(file)
        };
    }

    async verifyOnBlockchain(file) {
        const blockchainVerifier = new BlockchainVerifier({
            networks: ['Ethereum', 'Polygon', 'Sberbank-Chain']
        });

        return {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
            documentHash: await blockchainVerifier.verifyDocumentHash(file),
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
            timestamp: await blockchainVerifier.verifyTimestamp(file),
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –±–∞–Ω–∫–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
            bankSignature: await blockchainVerifier.verifyBankSignature(file),
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            smartContract: await blockchainVerifier.verifySmartContract(file)
        };
    }

    async performForensicAnalysis(file) {
        const forensicAnalyzer = new ForensicAnalyzer({
            tools: ['EnCase', 'FTK', 'Cellebrite']
        });

        return {
            // –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∏–∑–∫–æ–º —É—Ä–æ–≤–Ω–µ
            deepMetadata: await forensicAnalyzer.analyzeDeepMetadata(file),
            
            // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
            documentHistory: await forensicAnalyzer.analyzeDocumentHistory(file),
            
            // –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            hiddenData: await forensicAnalyzer.detectHiddenData(file),
            
            // –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            digitalArtifacts: await forensicAnalyzer.analyzeDigitalArtifacts(file),
            
            // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ –Ω–∞ –±–∏—Ç–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
            bitLevelAnalysis: await forensicAnalyzer.performBitLevelAnalysis(file)
        };
    }

    async performMLAnalysis(file) {
        const mlAnalyzer = new MachineLearningAnalyzer({
            models: ['XGBoost', 'LightGBM', 'CatBoost', 'Neural-Networks']
        });

        return {
            // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
            fraudPatterns: await mlAnalyzer.detectFraudPatterns(file),
            
            // –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö
            dataAnomalies: await mlAnalyzer.detectDataAnomalies(file),
            
            // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–¥–¥–µ–ª–∫–∏
            forgeryProbability: await mlAnalyzer.predictForgeryProbability(file),
            
            // –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            operationSequence: await mlAnalyzer.analyzeOperationSequence(file),
            
            // –ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            documentClustering: await mlAnalyzer.performDocumentClustering(file)
        };
    }

    async performBiometricVerification(file) {
        const biometricVerifier = new BiometricVerifier({
            methods: ['fingerprint', 'signature', 'behavioralPatterns']
        });

        return {
            // –ê–Ω–∞–ª–∏–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            signatureBiometrics: await biometricVerifier.analyzeSignatureBiometrics(file),
            
            // –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            behavioralAnalysis: await biometricVerifier.analyzeBehavioralPatterns(file),
            
            // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
            biometricMarkers: await biometricVerifier.verifyBiometricMarkers(file)
        };
    }

    async performQuantumSecurityChecks(file) {
        const quantumSecurityChecker = new QuantumSecurityChecker();

        return {
            // –ö–≤–∞–Ω—Ç–æ–≤–æ-—É—Å—Ç–æ–π—á–∏–≤–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            quantumResistantEncryption: await quantumSecurityChecker.verifyQuantumResistance(file),
            
            // –ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            quantumEntanglement: await quantumSecurityChecker.checkQuantumEntanglement(file),
            
            // –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏
            quantumRandomness: await quantumSecurityChecker.verifyQuantumRandomness(file)
        };
    }

    async performAdvancedNetworkAnalysis(file) {
        const networkAnalyzer = new NetworkAnalyzer({
            methods: ['graphTheory', 'neuralNetworks', 'topologicalAnalysis']
        });

        return {
            // –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
            transactionNetwork: await networkAnalyzer.analyzeTransactionNetwork(file),
            
            // –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            topologicalFeatures: await networkAnalyzer.analyzeTopology(file),
            
            // –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
            operationGraph: await networkAnalyzer.analyzeOperationGraph(file)
        };
    }

    async calculateTrustScore(allChecks) {
        const trustScoreCalculator = new TrustScoreCalculator({
            weights: {
                cryptographic: 0.25,
                ai: 0.20,
                blockchain: 0.15,
                forensic: 0.15,
                ml: 0.15,
                biometric: 0.10
            }
        });

        return await trustScoreCalculator.calculateScore(allChecks);
    }
}

class SupermaxSberbankValidator {
    constructor() {
        this.initializeUI();
        this.initializeEventListeners();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
        this.pdfParser = new PDFParser();
        this.qrValidator = new QRCodeValidator();
        this.digitalSignatureVerifier = new DigitalSignatureVerifier();
    }

    initializeUI() {
        this.dropZone = document.getElementById('dropZone');
        this.fileInput = document.getElementById('pdfInput');
        this.progressSection = document.getElementById('validationProgress');
        this.resultSection = document.getElementById('validationResult');
    }

    initializeEventListeners() {
        // Drag and drop —Å–æ–±—ã—Ç–∏—è
        this.dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            this.dropZone.classList.add('drag-over');
        });

        this.dropZone.addEventListener('dragleave', () => {
            this.dropZone.classList.remove('drag-over');
        });

        this.dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            this.dropZone.classList.remove('drag-over');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                this.handleFile(files[0]);
            }
        });

        // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                this.handleFile(e.target.files[0]);
            }
        });
    }

    async handleFile(file) {
        if (!file.type.includes('pdf')) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª');
            return;
        }

        try {
            this.showProgress();
            const result = await this.performUltimateValidation(file);
            this.showResult(result);
        } catch (error) {
            this.showError(error.message);
        }
    }

    async performUltimateValidation(file) {
        try {
            const result = {
                score: {
                    total: 0,
                    details: {}
                },
                checks: {
                    structure: false,
                    signature: false,
                    qrCode: false,
                    content: false,
                    metadata: false
                },
                details: {},
                warnings: [],
                paymentMethod: null,
                pdfVersion: null
            };

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é PDF
            const pdfVersion = await this.pdfParser.getPDFVersion(file);
            result.pdfVersion = pdfVersion;

            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PDF
            const structureCheck = await this.pdfParser.validatePDFStructure(file);
            result.checks.structure = structureCheck;
            result.score.details.structure = structureCheck ? 1 : 0;

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏
            const signatureCheck = await this.digitalSignatureVerifier.verify(file, 'sber');
            result.checks.signature = signatureCheck;
            result.score.details.signature = signatureCheck ? 1 : 0;

            // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const pdfData = await this.pdfParser.extractFullData(file);
            
            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ QR-–∫–æ–¥–∞
            let qrValid = false;
            try {
                const qrData = await this.qrValidator.decode(pdfData.qrCode);
                qrValid = qrData && qrData.length > 0;
                result.details.qrData = qrData;
            } catch (e) {
                result.warnings.push('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ QR-–∫–æ–¥–∞');
            }
            result.checks.qrCode = qrValid;
            result.score.details.qrCode = qrValid ? 1 : 0;

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä—Å–∏–∏ PDF
            const contentValidation = this.validateContent(pdfData);
            result.checks.content = contentValidation.isValid;
            result.score.details.content = contentValidation.score;
            result.details.contentValidation = contentValidation.details;

            // 6. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            const paymentMethodResult = await this.validatePaymentMethod(pdfData);
            result.paymentMethod = paymentMethodResult;

            // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä—Å–∏–∏ PDF
            const scores = Object.values(result.score.details);
            result.score.total = scores.reduce((a, b) => a + b, 0) / scores.length;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è PDF v5 –ø—Ä–æ–≤–µ—Ä–∫–∏
            if (pdfVersion === 5) {
                result.details.pdfV5Specific = {
                    linearized: await this.checkPDFLinearization(file),
                    objectStreams: await this.checkObjectStreams(file),
                    crossReferenceStream: await this.checkCrossReferenceStream(file)
                };
            }

            return result;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞: ${error.message}`);
        }
    }

    validateContent(pdfData) {
        const contentValidation = {
            isValid: false,
            details: {},
            score: 0
        };

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–µ–∫–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞
        const patterns = {
            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            bankInfo: {
                patterns: [
                    /–ü–ê–û\s+–°–ë–ï–†–ë–ê–ù–ö/i,
                    /–°–ë–ï–†–ë–ê–ù–ö/i,
                    /SBERBANK/i
                ],
                weight: 0.2
            },
            operationStatus: {
                patterns: [
                    /–û–ü–ï–†–ê–¶–ò–Ø\s+–û–î–û–ë–†–ï–ù–ê/i,
                    /–û–î–û–ë–†–ï–ù–û/i,
                    /APPROVED/i
                ],
                weight: 0.2
            },
            // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
            transactionIds: {
                patterns: [
                    /RRN:\s*\d{12}/,
                    /AUTH\.CODE:\s*\d{6}/,
                    /TERMINAL:\s*\d{8}/
                ],
                weight: 0.15
            },
            // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            amount: {
                patterns: [
                    /–°–£–ú–ú–ê:?\s*[\d\s,.]+\s*(?:–†–£–ë|RUB)/i,
                    /–ò–¢–û–ì–û:?\s*[\d\s,.]+/i,
                    /TOTAL:?\s*[\d\s,.]+/i
                ],
                weight: 0.25
            },
            // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            datetime: {
                patterns: [
                    /\d{2}\.\d{2}\.\d{2,4}\s+\d{2}:\d{2}(?::\d{2})?/,
                    /\d{2}\/\d{2}\/\d{2,4}\s+\d{2}:\d{2}/
                ],
                weight: 0.1
            },
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cardInfo: {
                patterns: [
                    /–ö–ê–†–¢–ê\s*\*{4}\d{4}/i,
                    /CARD\s*\*{4}\d{4}/i
                ],
                weight: 0.1
            }
        };

        let totalScore = 0;
        let totalWeight = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for (const [key, group] of Object.entries(patterns)) {
            const groupValid = group.patterns.some(pattern => pattern.test(pdfData.text));
            contentValidation.details[key] = groupValid;
            
            if (groupValid) {
                totalScore += group.weight;
            }
            totalWeight += group.weight;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
        contentValidation.score = totalScore / totalWeight;
        contentValidation.isValid = contentValidation.score >= 0.8; // –ü–æ—Ä–æ–≥ –≤ 80%

        return contentValidation;
    }

    showProgress() {
        this.progressSection.classList.remove('hidden');
        this.resultSection.classList.add('hidden');
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }

    showResult(result) {
        this.progressSection.classList.add('hidden');
        this.resultSection.classList.remove('hidden');

        const isValid = result.score.total >= 0.8;

        let contentDetails = '';
        if (result.details.contentValidation) {
            contentDetails = `
                <div class="content-validation-details">
                    <h3>–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:</h3>
                    <div class="content-checks">
                        ${Object.entries(result.details.contentValidation.details)
                            .map(([key, value]) => `
                                <div class="content-check-item ${value ? 'success' : 'failure'}">
                                    <span class="check-icon">${value ? '‚úì' : '‚úó'}</span>
                                    <span class="check-name">${this.getContentCheckName(key)}</span>
                                </div>
                            `).join('')}
                    </div>
                    <div class="content-score">
                        –û—Ü–µ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: ${(result.details.contentValidation.score * 100).toFixed(1)}%
                    </div>
                </div>
            `;
        }

        let pdfVersionInfo = '';
        if (result.pdfVersion) {
            pdfVersionInfo = `
                <div class="pdf-version-info">
                    <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PDF:</h3>
                    <p>–í–µ—Ä—Å–∏—è PDF: ${result.pdfVersion}</p>
                    ${result.details.pdfV5Specific ? `
                        <div class="pdf-v5-checks">
                            <p>–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è PDF v5:</p>
                            <ul>
                                <li>–õ–∏–Ω–µ–∞—Ä–∏–∑–∞—Ü–∏—è: ${result.details.pdfV5Specific.linearized ? '‚úì' : '‚úó'}</li>
                                <li>–ü–æ—Ç–æ–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤: ${result.details.pdfV5Specific.objectStreams ? '‚úì' : '‚úó'}</li>
                                <li>–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏: ${result.details.pdfV5Specific.crossReferenceStream ? '‚úì' : '‚úó'}</li>
                            </ul>
                        </div>
                    ` : ''}
                </div>
            `;
        }

        let warningsSection = '';
        if (result.warnings && result.warnings.length > 0) {
            warningsSection = `
                <div class="warnings-section">
                    <h3>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h3>
                    <ul>
                        ${result.warnings.map(warning => `<li>${warning}</li>`).join('')}
                    </ul>
                </div>
            `;
        }

        this.resultSection.innerHTML = `
            <div class="validation-result ${isValid ? 'valid' : 'invalid'}">
                <div class="result-header ${isValid ? 'success' : 'warning'}">
                    <div class="result-status">
                        <div class="status-icon">${isValid ? '‚úÖ' : '‚ùå'}</div>
                        <div class="status-text">
                            <h2>
                                ${isValid ? '–ß–ï–ö –ü–û–î–õ–ò–ù–ù–´–ô' : '–ß–ï–ö –ù–ï –ü–†–û–®–ï–õ –ü–†–û–í–ï–†–ö–£'}
                            </h2>
                            <p>–û–±—â–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: ${(result.score.total * 100).toFixed(1)}%</p>
                        </div>
                    </div>
                </div>

                <div class="check-details">
                    <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</h3>
                    <div class="check-list">
                        ${Object.entries(result.checks)
                            .map(([key, value]) => `
                                <div class="check-item ${value ? 'success' : 'failure'}">
                                    ${value ? '‚úì' : '‚úó'} ${this.getCheckName(key)}
                                    ${key === 'content' ? `(${(result.score.details.content * 100).toFixed(1)}%)` : ''}
                                </div>
                            `).join('')}
                    </div>
                </div>

                ${contentDetails}
                ${pdfVersionInfo}
                ${warningsSection}
            </div>
        `;
    }

    getContentCheckName(key) {
        const names = {
            bankInfo: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–µ',
            operationStatus: '–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏',
            transactionIds: '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
            amount: '–°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏',
            datetime: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
            cardInfo: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ'
        };
        return names[key] || key;
    }

    getCheckName(key) {
        const names = {
            structure: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ PDF —Ñ–∞–π–ª–∞',
            signature: '–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å',
            qrCode: 'QR-–∫–æ–¥ —á–µ–∫–∞',
            content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ–∫–∞',
            metadata: '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
        };
        return names[key] || key;
    }

    showError(message) {
        this.resultSection.classList.remove('hidden');
        this.resultSection.innerHTML = `
            <div class="error-message">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-text">${message}</div>
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new SupermaxSberbankValidator();
});